#include "imports/stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

(int, slice, slice) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_uint(32),
    ds~load_msg_addr(),
    ds~load_msg_addr()
  );
}

;; Impure because affect the state
() save_data(int value, slice recent_address, slice owner_address) impure inline {
  cell c = begin_cell()
    .store_uint(value, 32)
    .store_slice(recent_address)
    .store_slice(owner_address)
    .end_cell();
  set_data(c);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  ;; op - Operation
  int op = in_msg_body~load_uint(32);
  var (cv, recent_address, owner_address) = load_data();
  if (op == 1) {
    int bv = in_msg_body~load_uint(32);
      ;; ~dump(cv); - TO DEBUG
    int total = cv + bv;
    save_data(total, sender_address, owner_address);
    return();
  }

  ;; Deposit 
  if (op == 2) {
    return();
  }

  ;; Withdraw 
  if (op == 3) {
    throw_unless(103, equal_slice_bits(sender_address, owner_address));
    int withdraw_amount = in_msg_body~load_coins();
    var [balance, _] = get_balance();
    throw_unless(104, balance >= withdraw_amount);

    int return_val = min(withdraw_amount, balance - const::min_tons_for_storage);
    int msg_mode = 1; ;; 0 Ordinary msg + 1 Pay transfer fees separately
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(sender_address)
      .store_coins(return_val)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .end_cell();
    send_raw_message(msg, msg_mode);

    return();
  }

  throw(777);
}

(int, slice, slice) get_contract_storage_data() method_id {
  var (cv, recent_address, owner_address) = load_data();
  return (
    cv,
    recent_address,
    owner_address
  );
}

int get_sum() method_id {
  slice ds = get_data().begin_parse();
  return ds~load_uint(32);
}

int balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}
